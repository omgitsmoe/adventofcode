3 4 5 6 8 9 10 11
remember ip gets written into #ip x at the start of instr

addi 1 16 1 at start jumps to ip 17 -> setup
ip 17 addi 4 2 4 = 2                            reg[4] = reg[4] + 2
mulr 4 4 4 = 4                                  reg[4] = reg[4] * reg[4]
mulr 1 4 4 = 19*4 = 76                          reg[4] = reg[1] * reg[4]
muli 4 11 4 = 76 * 11 = 836                     reg[4] = reg[4] * 11
addi 2 5 2 = 5                                  reg[2] = reg[2] + 5
mulr 2 1 2 = 5 * 22 = 110                       reg[2] = reg[2] * reg[1]
addi 2 12 2 = 122                               reg[2] = reg[2] + 12
addr 4 2 4 = 836 + 122 = 958 -> r4              reg[4] = reg[4] + reg[2]
addr 1 0 1 = 25 + 1[0 if part1] = 26            reg[1] = reg[1] + reg[0]
seti 0 4 1 skipped if part2                     reg[1] = 0
setr 1 4 2 = 27 -> reg2                         reg[2] = reg[1]
mulr 2 1 2 = 27 * 28 = 756                      reg[2] = reg[2] * reg[1]
addr 1 2 2 = 29 + 756 = 785                     reg[2] = reg[1] + reg[2]
mulr 1 2 2 = 30 * 785 = 23550                   reg[2] = reg[1] * reg[2]
muli 2 14 2 = 23550 * 14 = 329700               reg[2] = reg[2] * 14
mulr 2 1 2 = 329700 * 32 = 10550400             reg[2] = reg[2] * reg[1]
addr 4 2 4 = 958 + 10550400 = 10551358 -> r4    reg[4] = reg[4] + reg[2]
seti 0 3 0 = 0 -> r0                            reg[0] = 0
seti 0 7 1 = ip0                                reg[1] = 0
==> reg = [0, 0, 10550400, 0, 10551358, 0], ip = 1
--> continues with:
ip1 seti 1 5 5 = 1 -> r5
seti 1 2 3 = 1 -> r3
mulr 5 3 2      reg[2] = reg[5] * reg[3]
eqrr 2 4 2      reg[2] = 1 if reg[2] == reg[4] else 0
addr 2 1 1      reg[1] = reg[2] + reg[1] # -> skip next depending on r2
addi 1 1 1      reg[1] = reg[1] + 1 # skipped if r2 was ==r4
addr 5 0 0      reg[0] = reg[5] + reg[0] # skipped if r2 was != r4
addi 3 1 3      reg[3] = reg[3] + + 1
gtrr 3 4 2      reg[2] = 1 if reg[3] > reg[4] else 0
addr 1 2 1      reg[1] = reg[1] + reg[2]
seti 2 6 1      reg[1] = 2 # skipped if r3 was >r4 else -> JUMP TO ip2
addi 5 1 5      reg[5] = reg[5] + 1 # skipped if !(r3 > r4)
gtrr 5 4 2      reg[2] = 1 if reg[5] > reg[4] else 0
addr 2 1 1      reg[1] = reg[2] + reg[1] # -> skip next depending on r2
seti 1 8 1      reg[1] = 1
mulr 1 1 1      END

translated:
ip = 1
reg = [0, 0, 365120, 0, 366078, 0]

reg[5] = 1
reg[3] = 1 # JUMP2 ip2
reg[2] = reg[5] * reg[3] # JUMP1 ip3
if reg[2] == reg[4]:
    reg[0] = reg[5] + reg[0]
reg[3] += 1
if reg[3] > reg[4]:
    reg[5] += 1
else:
    ->JUMP1
if reg[5] > reg[4]:
    END
else:
    JUMP2
        
refactor:
reg[5] = 1
while reg[5] <= reg[4]:
    reg[3] = 1
    while reg[3] <= reg[4]:
        reg[2] = reg[5] * reg[3] # JUMP1 ip3
        if reg[2] == reg[4]:
            reg[0] = reg[5] + reg[0]
        reg[3] += 1
    reg[5] += 1
    
expl:
while reg[5] <= reg[4]:
    reg[3] = 1
    while reg[3] <= reg[4]:
        reg[2] = reg[5] * reg[3] # JUMP1 ip3
        if reg[2] == reg[4]:
            reg[0] = reg[5] + reg[0]
            # -> adds reg5 to reg0 when theres a nr that == reg4 when multiplied with reg5 (since reg3 is counted up from 1, not at the start but since reg5 is 1 there the nr is ==reg4 anyway)
        reg[3] += 1
    reg[5] += 1
    

ip=3 [0, 2, 0, 12497, 10551358, 1] ['mulr', '5', '3', '2']
ip=4 [0, 3, 12497, 12497, 10551358, 1]
==========
vv checks if reg 2 equals reg 4 (10551358) -> puts 1 in reg2 else 0
ip=4 [0, 3, 12497, 12497, 10551358, 1] ['eqrr', '2', '4', '2']
ip=5 [0, 4, 0, 12497, 10551358, 1]
==========
ip=5 [0, 4, 0, 12497, 10551358, 1] ['addr', '2', '1', '1']
ip=6 [0, 5, 0, 12497, 10551358, 1]
==========
ip=6 [0, 5, 0, 12497, 10551358, 1] ['addi', '1', '1', '1']
ip=8 [0, 7, 0, 12497, 10551358, 1]
==========
if reg2 == reg4
ip7 addr 5 0 0
==========
ip=8 [0, 7, 0, 12497, 10551358, 1] ['addi', '3', '1', '3']
ip=9 [0, 8, 0, 12498, 10551358, 1]
==========
vv checks if reg 3 is greater than reg 4 (10551358) -> puts 1 in reg2 else 0
ip=9 [0, 8, 0, 12498, 10551358, 1] ['gtrr', '3', '4', '2']
ip=10 [0, 9, 0, 12498, 10551358, 1]
==========
ip=10 [0, 9, 0, 12498, 10551358, 1] ['addr', '1', '2', '1']
ip=11 [0, 10, 0, 12498, 10551358, 1]
^^ IF reg3 was >reg4: ip12 after this reg 5 is counted up by 1  addi 5 1 5
ip13 gtrr 5 4 2 checks if reg 5 (here after +1: 2) is greater than reg 4 (10551358) -> puts 1 in reg2 else 0
ip14 addr 2 1 1 -> ip reg is 15 if ^^ else 14 (without +1 from regular counting up of ip reg)
(if not reg5 > reg4 ip15 seti 1 8 1 -> ip reg to 1 -> which ends up (with +1 from counting up ip) at ip2 seti 1 2 3)
ip16 mulr 1 1 1 -> ip reg**2 -> invalid loc -> ENDS
due to ip7/instruction line 7 -> it sums up numbers 1..reg4 -> so reg4!(faculty)
==========
ip=11 [0, 10, 0, 12498, 10551358, 1] ['seti', '2', '6', '1']
ip=3 [0, 2, 0, 12498, 10551358, 1]
==========
ip=3 [0, 2, 0, 12498, 10551358, 1] ['mulr', '5', '3', '2']
ip=4 [0, 3, 12498, 12498, 10551358, 1]
==========
ip=4 [0, 3, 12498, 12498, 10551358, 1] ['eqrr', '2', '4', '2']
ip=5 [0, 4, 0, 12498, 10551358, 1]
==========
ip=5 [0, 4, 0, 12498, 10551358, 1] ['addr', '2', '1', '1']
ip=6 [0, 5, 0, 12498, 10551358, 1]
==========
ip=6 [0, 5, 0, 12498, 10551358, 1] ['addi', '1', '1', '1']
ip=8 [0, 7, 0, 12498, 10551358, 1]
==========
ip=8 [0, 7, 0, 12498, 10551358, 1] ['addi', '3', '1', '3']
ip=9 [0, 8, 0, 12499, 10551358, 1]
==========
ip=9 [0, 8, 0, 12499, 10551358, 1] ['gtrr', '3', '4', '2']
ip=10 [0, 9, 0, 12499, 10551358, 1]
==========
ip=10 [0, 9, 0, 12499, 10551358, 1] ['addr', '1', '2', '1']
ip=11 [0, 10, 0, 12499, 10551358, 1]
==========
ip=11 [0, 10, 0, 12499, 10551358, 1] ['seti', '2', '6', '1']
ip=3 [0, 2, 0, 12499, 10551358, 1]
==========
ip=3 [0, 2, 0, 12499, 10551358, 1] ['mulr', '5', '3', '2']
ip=4 [0, 3, 12499, 12499, 10551358, 1]

